scale_fill_manual(values=`names<-`(c(mycolor, "gray"), c(myrange,"other"))) +
labs(x="measurement", y="area under the curve (particles/mL)") +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
toplot <- graph_data1 %>% mutate(size=ifelse(size_bin<=MAXVAL & size_bin>=MINVAL, myrange, "other")) %>%
group_by(variable, sample, size, sample_size=gsub(" ","\n",paste(sample,size))) %>% summarise(area=sum(value))
p <- ggplot(toplot, aes(size_sample, area, fill=size)) +
geom_boxplot(outlier.shape = NA, position="dodge") +
geom_point(shape=21, size=3) +
scale_y_continuous(limits=c(0,max(toplot$area, na.rm=T)*1.1), expand=c(0,0), labels=function(x) format(x, scientifc=T) ) +
scale_fill_manual(values=`names<-`(c(mycolor, "gray"), c(myrange,"other"))) +
labs(x="measurement", y="area under the curve (particles/mL)") +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
p <- ggplot(toplot, aes(sample_size, area, fill=size)) +
geom_boxplot(outlier.shape = NA, position="dodge") +
geom_point(shape=21, size=3) +
scale_y_continuous(limits=c(0,max(toplot$area, na.rm=T)*1.1), expand=c(0,0), labels=function(x) format(x, scientifc=T) ) +
scale_fill_manual(values=`names<-`(c(mycolor, "gray"), c(myrange,"other"))) +
labs(x="measurement", y="area under the curve (particles/mL)") +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
size_percentiles_plot(avg)
size_percentiles_plot(med)
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df)))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(x=xmetric) +
theme_bw() +
theme(axis.title.y=element_blank())
ggplotly(p)
}
sections_graphs <- colnames(results) %>% {.[!. %in% colnames(results)[1:3]]}
for(section in sections_graphs){
cat("\n")
cat("##", gsub("\\([^\\)]*\\)","", gsub(" per ","/", section)), "\n") # Create second level headings
print(graph1d(results, section))
cat("\n")
}
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(x=xmetric) +
theme_bw() +
theme(axis.title.y=element_blank())
ggplotly(p)
}
sections_graphs <- colnames(results) %>% {.[!. %in% colnames(results)[1:3]]}
for(section in sections_graphs){
cat("\n")
cat("##", gsub("\\([^\\)]*\\)","", gsub(" per ","/", section)), "\n") # Create second level headings
print(graph1d(results, section))
cat("\n")
}
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
}
sections_graphs <- colnames(results) %>% {.[!. %in% colnames(results)[1:3]]}
for(section in sections_graphs){
cat("\n")
cat("##", gsub("\\([^\\)]*\\)","", gsub(" per ","/", section)), "\n") # Create second level headings
print(graph1d(results, section))
cat("\n")
}
results
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
}
sections_graphs <- colnames(results) %>% {.[!. %in% colnames(results)[1,2,3,ncol(results)]]}
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
}
sections_graphs <- colnames(results) %>% {.[!. %in% colnames(results)[c(1,2,3,ncol(results))]]}
for(section in sections_graphs){
cat("\n")
cat("##", gsub("\\([^\\)]*\\)","", gsub(" per ","/", section)), "\n") # Create second level headings
print(graph1d(results, section))
cat("\n")
}
p <- ggplot(size_data, aes(Mean, Mode)) +
geom_point() +
facet_wrap(~sample) +
geom_rug(color="red") +
geom_errorbar(aes(xmin=Mean-SD, xmax=Mean+SD)) +
geom_errorbar(aes(ymin=Mode-SD, ymax=Mode+SD)) +
scale_x_continuous(limits=c(0,1000), expand=c(0,0), breaks=seq(0,1000,200)) +
scale_y_continuous(limits=c(0,1000), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(axis.text.x=element_text(angle=90, hjust=0, vjust=.5))
p
ggplotly(p)
toplot <- melt(size_data, id.vars="sample", measure.vars=c("D10","D50","D90"), value.name="value")
p <- ggplot(toplot, aes(value, variable, color=sample)) +
geom_boxplot() +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_x_continuous(limits=c(0,1000), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.y=element_blank(), axis.title.y=element_blank())
ggplotly(p)
p <- ggplot(toplot, aes(value, variable, color=sample)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_x_continuous(limits=c(0,1000), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.y=element_blank(), axis.title.y=element_blank())
ggplotly(p)
p <- ggplot(toplot, aes(value, variable, color=sample)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_x_continuous(limits=c(0,600), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.y=element_blank(), axis.title.y=element_blank())
ggplotly(p)
graph1d(size_data, "Valid Tracks") +
xlim(c(0,NA))
graph1d(size_data, "Valid Tracks")
append_log("Particles in size range")
myrange <- paste0(MINVAL,"-",MAXVAL,"nm")
toplot <- graph_data1 %>% mutate(size=ifelse(size_bin<=MAXVAL & size_bin>=MINVAL, myrange, "other")) %>%
group_by(variable, sample, size, sample_size=gsub(" ","\n",paste(sample,size))) %>% summarise(area=sum(value))
mycolor <- "gold"
p <- ggplot(toplot, aes(size, area, fill=size)) +
geom_boxplot(outlier.shape = NA, position="dodge") +
geom_point(shape=21, size=3) +
facet_wrap(~sample) +
scale_y_continuous(limits=c(0,max(toplot$area, na.rm=T)*1.1), expand=c(0,0), labels=function(x) format(x, scientifc=T) ) +
scale_fill_manual(values=`names<-`(c(mycolor, "gray"), c(myrange,"other"))) +
labs(x="measurement", y="area under the curve (particles/mL)") +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
append_log("Size Distribution median")
df <- group_by(graph_data1, size_bin, sample=gsub(" ","\n",sample)) %>% summarise(value=median(value, na.rm=T))
size_distribution_graph(df)
graphHeat <- function(df){
n_records <- length(unique(df$sample))
n_samples <- length(unique(gsub("\\(.*","",df$sample)))
records_per_sample <- n_records/n_samples
p <- ggplot(df, aes(variable, sample, fill=fillcolor)) +
geom_tile(color="white") +
geom_text(aes(label=value)) +
scale_fill_identity() +
theme_bw() +
theme(axis.title=element_blank(), axis.text.x=element_text(angle=45, vjust=1, hjust=1))
append_log("... plot generated")
if(n_samples>1){
hlines <- seq(records_per_sample,n_records-records_per_sample,by=records_per_sample) + 0.5
p <- p + geom_hline(yintercept=hlines, size=1)
}
append_log("... return plot")
return(p)
}
append_log("Warnings")
do({
toplot <- warnings %>% mutate(sample=paste0(sample,"(", seq(nrow(.)), ")")) %>% melt(id.vars="sample") %>%
mutate(fillcolor=ifelse(value %in% c("No","OK",""), "lightblue", "yellow"), value=gsub(" ","\n",value))
append_log("... table generated")
# graphHeat(toplot)
})
append_log("Results - Table")
do({
supertable(results %>% dplyr::relocate(sample)) # %>% `colnames<-`(gsub("\\(.*","",colnames(.)))
})
append_log("Size Data - Mean Mode SD")
do({
p <- ggplot(size_data, aes(Mean, Mode)) +
geom_point() +
facet_wrap(~sample) +
geom_rug(color="red") +
geom_errorbar(aes(xmin=Mean-SD, xmax=Mean+SD)) +
geom_errorbar(aes(ymin=Mode-SD, ymax=Mode+SD)) +
scale_x_continuous(limits=c(0,1000), expand=c(0,0), breaks=seq(0,1000,200)) +
scale_y_continuous(limits=c(0,1000), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(axis.text.x=element_text(angle=90, hjust=0, vjust=.5))
ggplotly(p)
})
MAX_PARTICLE_SIZE <- 600
append_log("Size Data - Mean Mode SD")
do({
p <- ggplot(size_data, aes(Mean, Mode)) +
geom_point() +
facet_wrap(~sample) +
geom_rug(color="red") +
geom_errorbar(aes(xmin=Mean-SD, xmax=Mean+SD)) +
geom_errorbar(aes(ymin=Mode-SD, ymax=Mode+SD)) +
scale_x_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
scale_y_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(axis.text.x=element_text(angle=90, hjust=0, vjust=.5))
ggplotly(p)
})
append_log("Size Data - Mean Mode SD")
do({
p <- ggplot(size_data, aes(Mean, Mode)) +
geom_point() +
facet_wrap(~sample) +
geom_rug(color="red") +
geom_errorbar(aes(xmin=Mean-SD, xmax=Mean+SD)) +
geom_errorbar(aes(ymin=Mode-SD, ymax=Mode+SD)) +
scale_x_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,100)) +
scale_y_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,100)) +
theme_bw() +
theme(axis.text.x=element_text(angle=90, hjust=0, vjust=.5))
ggplotly(p)
})
append_log("Size Data - D10 D50 D90")
do({
toplot <- melt(size_data, id.vars="sample", measure.vars=c("D10","D50","D90"), value.name="value")
p <- ggplot(toplot, aes(value, variable, color=sample)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_x_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.y=element_blank(), axis.title.y=element_blank())
ggplotly(p)
})
p <- ggplot(toplot, aes(variable, value, color=sample)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_x_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.y=element_blank(), axis.title.y=element_blank())
p
p <- ggplot(toplot, aes(variable, value, color=sample)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_y_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.x=element_blank(), axis.title.x=element_blank())
p
p <- ggplot(toplot, aes(variable, value, color=sample)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_y_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.x=element_blank(), axis.title.x=element_blank())
ggplotly(p)
p <- ggplot(toplot, aes(variable, value)) +
geom_boxplot() +
facet_wrap(~sample) +
geom_point(alpha=.4) +
geom_hline(yintercept=seq(2)+.5, color="gray") +
scale_y_continuous(limits=c(0,MAX_PARTICLE_SIZE), expand=c(0,0), breaks=seq(0,1000,200)) +
theme_bw() +
theme(panel.grid.major.x=element_blank(), axis.title.x=element_blank())
ggplotly(p)
append_log("... table generated")
toplot <- warnings %>% mutate(sample=paste0(sample,"(", seq(nrow(.)), ")")) %>% melt(id.vars="sample") %>%
mutate(fillcolor=ifelse(value %in% c("No","OK",""), "lightblue", "yellow"), value=gsub(" ","\n",value))
graphHeat(toplot)
supertable(details[,c(4,2,5)] %>% `colnames<-`(gsub("\\."," ",colnames(.))))
details
df <- results
df[,3] <- bignum(df[,3])
supertable(df %>% dplyr::relocate(sample))
df[,3] <- format(df[,3], scientific=T)
df
format(df[,3], scientific=T)
df
df$`Concentration (Particles / ml)`
df$`Concentration (Particles / ml)` <- bignum(df$`Concentration (Particles / ml)`)
df
sections_graphs <- colnames(results) %>% {.[!. %in% colnames(results)[c(1,2,3,ncol(results))]]}
sections_graphs
sections_graphs
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
}
sections_graphs
sections <- colnames(results) %>% {.[!. %in% colnames(results)[c(1,2,3,ncol(results))]]}
graph1d(results, sections[1])
sections
sections
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
}
sections <- colnames(results) %>% {.[!. %in% colnames(results)[c(1,2,3,ncol(results))]]}
i <- 1
graph1d(results, sections[i])
i <- i+1
graph1d(results, sections[i])
i <- i+1
graph1d(results, sections[i])
i <- i+1
graph1d(results, sections[i])
i <- i+1
graph1d(results, sections[i])
sections[i]
df <- results
xmetric <- sections[i]
xmetric2 <- make.names(xmetric)
xmetric2
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
df
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
p
ggplotly(p)
LOGFILE <- paste0("log_particulatorRMD.txt")
append_log <- function(..., Logfile=LOGFILE){
try(
write(paste(Sys.time(), ...), file=Logfile, append = TRUE),
silent = TRUE
)
}
do <- function(anything, Logfile=LOGFILE){
out <- try(anything)
if(class(out) %in% "try-error") append_log(out, Logfile=Logfile)
return(out)
}
bignum <- function(x){
format(as.numeric(x), scientific=F, big.mark=",")
}
PROCESS_FILE <- "R_Un_n_In_g.txt"
append_log("_", Logfile=PROCESS_FILE)
append_log("start")
customtext <- params$customtext
append_log(customtext)
if(customtext==""){
CUSTOMTEXT <- c(100,300)
}else{
CUSTOMTEXT <- as.numeric(strsplit(customtext,",")[[1]])
}
append_log(CUSTOMTEXT)
MINVAL <- CUSTOMTEXT[1]
MAXVAL <- CUSTOMTEXT[2]
append_log("load libraries")
library(ggplot2)
library(data.table)
library(dplyr)
library(ggrepel)
library(plotly)
library(DT)
library(scales)
supertable <- function(df, extrafilter=F){
myfilter <- list()
if(extrafilter) myfilter <- list(position = 'top', clear = FALSE)
datatable(df, extensions="Buttons", filter = myfilter,
options=list(pageLength = nrow(df), dom="Bfrtip", buttons=c("copy","csv","excel","pdf","print")), rownames = F)
}
#set global variables
colorOK <- "deepskyblue"
colorMEH <- "orange"
colorBAD <- "red"
MAX_PARTICLE_SIZE <- 600
#read file
# read.csv("Syringe Pump Test 50 2022-08-11 13-55-48-ExperimentSummary.csv", sep=",", row.names=NULL, col.names = seq(100)) %>%
append_log("list")
list0 <- list.files(pattern = "ExperimentSummary.csv$") %>%
lapply(function(x) {
df <- read.csv(x, sep=",", row.names=NULL, col.names = seq(100)) %>% {.[,apply(.,2,function(x) !all(is.na(x)) )]}
n <- ncol(df)-2
measurements <- paste0("measure",seq(n-1))
samplename <- gsub("ExperimentSummary.csv$","",x)
sections <- c("[Experiment Details]","[Conditions]","[Settings]","[Results]",
"[Concentration Warnings]","[Information]","[Size Data]","Bin centre (nm)","Percentile")
section_starts <- df[,1] %>% {which(. %in% sections)}
section_lengths <- c(8,12,7,8,7,9,10,section_starts[9]-section_starts[8]-1,101) %>% `names<-`(sections)
section_table <- df[,1] %>% {which(. %in% names(section_lengths))} %>%
{data.frame(row.names=names(section_lengths), start=.+1, end=.+as.vector(section_lengths))}
get_rows <- function(i, n_cols=n, transpose=T){
tab <- section_table[sections[i],,drop=T] %>% unlist() %>% {seq(.[1],.[2])} %>% {df[.,,drop=F]}
if(transpose) tab <- tab %>% {`rownames<-`(.[, 2:n_cols,drop=F], tab[,1])} %>% t() %>% as.data.frame() %>%
mutate_if(~sum(as.numeric(.x))>0, ~as.numeric(.x))
return(tab)
}
details <- get_rows(1, n_cols=2) %>% mutate(sample=samplename)
general <- lapply(2:3, get_rows) %>% do.call(cbind, .) %>% mutate(sample=samplename)
results <- get_rows(4) %>% mutate(sample=samplename) %>% mutate_if(~!any(is.na(as.numeric(.x))), ~as.numeric(.x))
warnings <- get_rows(5) %>% mutate(sample=samplename)
info <- get_rows(6) %>% mutate(sample=samplename)
size_data <- get_rows(7) %>% mutate(sample=samplename)
graph_data1 <- get_rows(8, transpose=F) %>% {.[1:n]} %>% `colnames<-`(c("size_bin",measurements)) %>%
melt(id.vars="size_bin", measure.vars=measurements) %>% mutate(sample=samplename) %>%  mutate_if(~!any(is.na(as.numeric(.x))), ~as.numeric(.x))
graph_data2 <- get_rows(9, transpose=F) %>% {.[1:n]} %>% `colnames<-`(c("percentile",measurements)) %>%
melt(id.vars="percentile", measure.vars=measurements) %>% mutate(sample=samplename) %>% mutate_if(~!any(is.na(as.numeric(.x))), ~as.numeric(.x))
return(list(details=details, general=general, results=results, warnings=warnings, info=info, size_data=size_data,
graph_data1=graph_data1, graph_data2=graph_data2))
})
append_log("extract data")
details <- list0 %>% lapply(function(x) x$details) %>% do.call(rbind, .)
general <- list0 %>% lapply(function(x) x$general) %>% do.call(rbind, .)
results <- list0 %>% lapply(function(x) x$results) %>% do.call(rbind, .)
warnings<- list0 %>% lapply(function(x) x$warnings)%>% do.call(rbind, .)
info    <- list0 %>% lapply(function(x) x$info)    %>% do.call(rbind, .)
size_data<- list0 %>%lapply(function(x) x$size_data)%>% do.call(rbind, .)
graph_data1 <- list0 %>% lapply(function(x) x$graph_data1) %>% do.call(rbind, .) %>% mutate(variable=as.character(variable))
graph_data2 <- list0 %>% lapply(function(x) x$graph_data2) %>% do.call(rbind, .) %>% mutate(variable=as.character(variable))
append_log("define functions")
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df)))
ggplot(df, aes_string(xmetric2, "sample")) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
stat_summary(aes(label=round(..x..,2)) , fun=mean, geom="label") +
labs(x=xmetric) +
theme_bw() +
theme(axis.title.y=element_blank())
}
graph2d <- function(df, xmetric, ymetric){
ggplot(df, aes_string(xmetric, ymetric, color="sample")) +
geom_point(alpha=.4, size=3) +
theme_bw() +
theme()
}
graph3d <- function(df, xmetric, ymetric, labelmetric){
graph2d(df, xmetric=xmetric, ymetric=ymetric) +
geom_text_repel(aes_string(label=labelmetric))
}
graph1d <- function(df, xmetric){
xmetric2 <- make.names(xmetric)
df <- `colnames<-`(df, make.names(colnames(df))) %>%
mutate(sample=gsub(" ","\n",sample))
p <- ggplot(df, aes_string("sample", xmetric2)) +
geom_boxplot(outlier.shape=NA) +
geom_point(alpha=.4) +
# stat_summary(aes(label=round(..x..,2)) , fun=median, geom="label") +
labs(y=xmetric) +
theme_bw() +
theme(axis.title.x=element_blank())
ggplotly(p)
}
sections <- colnames(results) %>% {.[!. %in% colnames(results)[c(1,2,3,ncol(results))]]}
i <- 1
graph1d(results, sections[i])
i <- i+1
source("functions/write_Logfile.R")
setwd("C:/Users/nicolas.huber/OneDrive - Resolve BioSciences GmbH/Dokumente/github/scriptSelector")
source("functions/write_Logfile.R")
